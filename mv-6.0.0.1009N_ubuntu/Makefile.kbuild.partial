#
#
# Note: This Makefile is for 2.6.X and 3.X kernel, at present.
#
# V0.0.0.6 Ver.Make

# default to build for the running kernel
ifeq ("x", "x$(KERNEL_SRC)")
	KERNEL_SRC=/lib/modules/$(shell uname -r)/build

  ifeq ("powerpc", "$(ARCH)")
   	KERNEL_SRC=/root/katmai_29/lib/modules/2.6.29/build
  endif
 
  ifeq ("arm", "$(ARCH)")
	KERNEL_SRC=/root/armadaxp/linux-2.6.35.9	
  endif

endif

# use KERNEL_SRC if not called by our driver disk maker
ifeq ("x", "x$(KERNEL_SOURCE_DIR)")
        KERNEL_SRC_DIR=$(KERNEL_SRC)
else
	KERNEL_SRC_DIR=$(KERNEL_SOURCE_DIR)
endif

ifeq ("x", "x$(KERNEL_BUILD_DIR)")
	KERNEL_BLD_DIR=$(KERNEL_SRC_DIR)
else
        KERNEL_BLD_DIR=$(KERNEL_BUILD_DIR)
endif

include $(src)/mv_conf.mk

ifeq ("xy", "x$(RAID_MODULE)")
	USE_RAID=y
	LIB_TYPE=_raid_
else
	USE_RAID=n
	LIB_TYPE=_nonraid_
endif


# KERNEL_VER := $(shell cat $(KERNEL_BLD_SRC)/include/linux/version.h | grep UTS_RELEASE | cut -c22-24 | head -n 1)

ifneq ("arm", "$(ARCH)")
# we may build for 32bit kernel on a 64bit system
CONFIG_64BIT=$(shell [ -f $(KERNEL_BLD_DIR)/.config ] && cat $(KERNEL_BLD_DIR)/.config | grep -m 1 CONFIG_64BIT | awk -F= '{print $$2}')
CONFIG_REGPARM=$(shell [ -f $(KERNEL_BLD_DIR)/.config ] && cat $(KERNEL_BLD_DIR)/.config | grep -m 1 CONFIG_REGPARM | awk -F= '{print $$2}')
CONFIG_SUSE_KERNEL=$(shell [ -f $(KERNEL_BLD_DIR)/.config ] && cat $(KERNEL_BLD_DIR)/.config | grep -m 1 CONFIG_SUSE_KERNEL | awk -F= '{print $$2}')
endif


ifeq ($(strip $(CONFIG_64BIT)),y)
	ARCH_TYPE=x86_64
		MV_LIB_NAME=libmv$(LIB_TYPE)64
else	
	ARCH_TYPE=i386 
	ifeq ($(strip $(CONFIG_REGPARM)),y)
		MV_LIB_NAME=libmv$(LIB_TYPE)32
	else
		MV_LIB_NAME=libmv$(LIB_TYPE)32_noregparm
	endif
endif


ifeq ($(ARCH), )
ifeq ($(strip $(CONFIG_64BIT)),y)
	ARCH_TYPE=x86_64
	RAID_LIB_NAME=libmv$(LIB_TYPE)64
else	
	ARCH_TYPE=i386 
	ifeq ($(strip $(CONFIG_REGPARM)),y)
		RAID_LIB_NAME=libmv$(LIB_TYPE)32
	else
		RAID_LIB_NAME=libmv$(LIB_TYPE)32_noregparm
	endif
endif
else
	ARCH_TYPE=$(ARCH)
endif

ifeq ("powerpc", "$(ARCH)")
	MV_CC     =  $(CROSS_COMPILE)gcc
	MV_LD     =  $(CROSS_COMPILE)ld
else

ifeq ("arm", "$(ARCH)")
	MV_CC	  =  $(CROSS_COMPILE)gcc
	MV_LD	  =  $(CROSS_COMPILE)ld
else
	MV_CC     =  $(CROSS_COMPILE)$(CC)
	MV_LD     =  $(CROSS_COMPILE)$(LD)
endif
endif

export LD_LIBRARY_PATH

OSDEP_OBJS      := linux_main.o    hba_exp.o          \
		   hba_mod.o       hba_timer.o        \
		   mv_os.o   linux_iface.o				

LIBMV_OBJS      := lib/$(MV_LIB_NAME).obj

HBA_OBJS        := $(OSDEP_OBJS) $(LIBMV_OBJS)


ifneq ("arm", "$(ARCH)")
INCLUDE_DIR     = -I$(KERNEL_BLD_DIR)/include                          \
		  -I$(KERNEL_BLD_DIR)/include/scsi                     \
		  -I$(KERNEL_BLD_DIR)/drivers/scsi                     \
	 	  -I$(KERNEL_SRC_DIR)/include                          \
	 	  -I$(KERNEL_SRC_DIR)/include/scsi                     \
	 	  -I$(KERNEL_SRC_DIR)/drivers/scsi
endif



ifeq ($(SUPPORT_VANIR), y)
obj-$(CONFIG_SCSI_MV_94xx)      :=   mv94xx.o
mv94xx-objs   :=   $(HBA_OBJS) 
endif
ifeq ($(SUPPORT_ODIN), y)
obj-$(CONFIG_SCSI_MV_64xx)      :=   mv64xx.o
mv64xx-objs   :=   $(HBA_OBJS) 
endif
ifeq ($(SUPPORT_ATHENA), y)
obj-$(CONFIG_SCSI_MV_94xx)      :=   mv14xx.o
mv14xx-objs   :=   $(HBA_OBJS)
endif
clean-files   +=   Modules.symvers
clean-files   +=   Module.symvers

EXTRA_CFLAGS  :=   -I$(src)/include -I$(src)/.

EXTRA_CFLAGS  +=  -D__MV_LINUX__ $(INCLUDE_DIR) -std=gnu99 #-D__MV_DEBUG__

ifeq ($(CONFIG_64BIT), y)
EXTRA_CFLAGS  +=   -D_64_SYS_
else
EXTRA_CFLAGS  +=   -D_32_LEGACY_
endif

EXTRA_CFLAGS  +=   -D_64_BIT_COMPILER

EXTRA_CFLAGS  +=   -include $(src)/mv_config.h

ifeq ($(RAID_MODULE), y)
EXTRA_CFLAGS  +=   -DRAID_DRIVER=1
endif

ifeq ($(RAID6_MODULE), y)
EXTRA_CFLAGS  +=   -DSUPPORT_RAID6=1
endif

ifeq ($(CACHE_MODULE), y)
EXTRA_CFLAGS  +=   -DCACHE_MODULE_SUPPORT=1
endif

ifeq ($(SUPPORT_VANIR), y)
EXTRA_CFLAGS  +=   -DPRODUCTNAME_VANIR
endif

ifeq ($(SUPPORT_ODIN), y)
EXTRA_CFLAGS  +=   -DPRODUCTNAME_ODIN
endif

ifeq ($(SUPPORT_ATHENA), y)
EXTRA_CFLAGS  +=   -DPRODUCTNAME_ATHENA
endif

ifeq ($(CONFIG_SUSE_KERNEL), y)
EXTRA_CFLAGS  += -DIS_OPENSUSE_SLED_SLES=1
else
EXTRA_CFLAGS	+= -DIS_OPENSUSE_SLED_SLES=0
endif

EXTRA_CFLAGS  +=  -Wno-unused-variable 
EXTRA_CFLAGS  += -D__LEGACY_OSSW__=1 -D_OS_LINUX	  

